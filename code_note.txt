二叉树

#0：二叉树，大体分为4类：
		满二叉树：每个节点都是满的；即：深度为k，节点数为(2^k - 1)
		完全二叉树：“除了最底层节点可能没填满外”，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置
					即深度为k，节点数为1  ~  (2^k - 1)
		二叉搜索树：满二叉树和完全二叉树都没有数值的，而二叉搜索树是有数值的了，二叉搜索树是一个有序树（左节点<中节点值<右节点值），对树的形状没有要求。
		平衡二叉搜索树（AVL）：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树（就是说要么有节点，要么没有）。
	
#0.1：二叉树可以链式存储（指针），也可以顺序存储（数组）

		当用数组表示时：如果父节点的数组下表是i，那么它的左孩子就是i * 2 + 1，右孩子就是 i * 2 + 2。

		当用链式表示的二叉树，更有利于我们理解，所以一般我们都是用链式存储二叉树。
	
#1：深度优先搜索 遍历方式：前中后序遍历----一般使用递归或迭代（栈），尽量不要使用递归
	 广度优先搜索 遍历方式：层序遍历----用队列
	 
#2：递归算法的三个要素。每
	1）确定递归函数的参数和返回值： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 
									并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。

	2）确定终止条件： 如果递归没有终止，操作系统的内存栈必然就会溢出。

	3）确定单层递归的逻辑： 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。
	
#3：递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中






























