from typing import List


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        """
        确定dp数组（dp table）以及下标的含义：dp[i][j]，第i天状态为j，所剩的最多现金为dp[i][j]。
                                            其实本题很多同学搞的比较懵，是因为出现冷冻期之后，状态其实是比较复杂度，例如今天买入股票、今天卖出股票、今天是冷冻期，都是不能操作股票的。 具体可以区分出如下四个状态：

                                            状态一：买入股票状态（今天买入股票，或者是之前就买入了股票然后没有操作）
                                            卖出股票状态，这里就有两种卖出股票状态
                                            状态二：两天前就卖出了股票，度过了冷冻期，一直没操作，今天保持卖出股票状态
                                            状态三：今天卖出了股票
                                            状态四：今天为冷冻期状态，但冷冻期状态不可持续，只有一天！
                                            j的状态为：
                                                0：状态一
                                                1：状态二
                                                2：状态三
                                                3：状态四
        确定递推公式：达到买入股票状态（状态一）即：dp[i][0]，有两个具体操作：
                        操作一：前一天就是持有股票状态（状态一），dp[i][0] = dp[i - 1][0]
                        操作二：今天买入了，有两种情况
                            前一天是冷冻期（状态四），dp[i - 1][3] - prices[i]
                            前一天是保持卖出股票状态（状态二），dp[i - 1][1] - prices[i]
                    所以操作二取最大值，即：max(dp[i - 1][3], dp[i - 1][1]) - prices[i]
                    那么dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3], dp[i - 1][1]) - prices[i]);

                    达到保持卖出股票状态（状态二）即：dp[i][1]，有两个具体操作：
                        操作一：前一天就是状态二
                        操作二：前一天是冷冻期（状态四）
                        dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);

                    达到今天就卖出股票状态（状态三），即：dp[i][2] ，只有一个操作：
                        操作一：昨天一定是买入股票状态（状态一），今天卖出
                        即：dp[i][2] = dp[i - 1][0] + prices[i];

                    达到冷冻期状态（状态四），即：dp[i][3]，只有一个操作：
                        操作一：昨天卖出了股票（状态三）
                        dp[i][3] = dp[i - 1][2];


                    dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3], dp[i - 1][1]) - prices[i]);
                    dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);
                    dp[i][2] = dp[i - 1][0] + prices[i];
                    dp[i][3] = dp[i - 1][2];
        dp数组如何初始化：这里主要讨论一下第0天如何初始化。
                        如果是持有股票状态（状态一）那么：dp[0][0] = -prices[0]，买入股票所剩现金为负数。
                        保持卖出股票状态（状态二），第0天没有卖出dp[0][1]初始化为0就行，
                        今天卖出了股票（状态三），同样dp[0][2]初始化为0，因为最少收益就是0，绝不会是负数。
                        同理dp[0][3]也初始为0。
        确定遍历顺序：从递归公式上可以看出，dp[i] 依赖于 dp[i-1]，所以是从前向后遍历。
        举例推导dp数组：去官网看图==》最后结果是取 状态二，状态三，和状态四的最大值，不少同学会把状态四忘了，状态四是冷冻期，最后一天如果是冷冻期也可能是最大值。
        """
        n = len(prices)
        if n == 0:
            return 0
        dp = [[0] * 4 for _ in range(n)]
        dp[0][0] = -prices[0]  #　持股票
        for i in range(1, n):
            dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3], dp[i - 1][1]) - prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][3])
            dp[i][2] = dp[i - 1][0] + prices[i]
            dp[i][3] = dp[i - 1][2]
        return max(dp[n - 1][3], dp[n - 1][1], dp[n - 1][2])