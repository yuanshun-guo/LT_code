"""
仔细想想本题就可以转化为01背包问题：

    只有确定了如下四点，才能把01背包问题套到本题上来。

        背包的体积为sum / 2
        背包要放入的商品（集合里的元素）重量为 元素的数值，价值也为元素的数值
        背包如果正好装满，说明找到了总和为 sum / 2 的子集。
        背包中每一个元素是不可重复放入。

"""
from typing import List


class Solution:
    def canPartition(self, nums: List) -> bool:
        """
        确定dp数组（dp table）以及下标的含义：dp[j]表示 背包总容量是j，最大可以凑成j的子集总和为dp[j]
        确定递推公式：本题，相当于背包里放入数值，那么物品i的重量是nums[i]，其价值也是nums[i]。
                    所以递推公式：dp[j] = max(dp[j], dp[j - nums[i]] + nums[i]);
        dp数组如何初始化：首先dp[0]一定是0。
                        如果如果题目给的价值都是正整数那么非0下标都初始化为0就可以了，如果题目给的价值有负数，那么非0下标就要初始化为负无穷。
                        这样才能让dp数组在递归公式的过程中取的最大的价值，而不是被初始值覆盖了。
        确定遍历顺序：如果使用一维dp数组，物品遍历的for循环放在外层，遍历背包的for循环放在内层，且内层for循环倒序遍历！
        举例推导dp数组：dp[j]的数值一定是小于等于j的。
                       如果dp[j] == j 说明，集合中的子集总和正好可以凑成总和j，理解这一点很重要。
        """
        target = sum(nums)
        if target % 2 == 1:
            return False

        target //= 2  # 我们需要算一半的

        # dp[i]中的i表示背包内总和
        # 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200
        # 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了
        dp = [0] * 10001

        # 开始 01背包
        for i in range(len(nums)):
            #  每一个元素一定是不可重复放入，所以从大到小遍历
            for j in range(target, nums[i] - 1, -1):  # num[i] - 1 这样保证可以取到num[i]  ,当然低于物品的容量num[i]时，也就不需要进行遍历了
                dp[j] = max(dp[j], dp[j - nums[i]] + nums[i])

        # 集合中的元素正好可以凑成总和target
        return dp[target] == target
